/*
 * [BETA] Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is in Beta and still in progress. Some endpoints are not available yet.
 *
 * API version: 1.0.0
 * Contact: support+api+documentation@qovery.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
)

// BudgetExceeded struct for BudgetExceeded
type BudgetExceeded struct {
	BudgetExceeded *bool `json:"budget_exceeded,omitempty"`
}

// NewBudgetExceeded instantiates a new BudgetExceeded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBudgetExceeded() *BudgetExceeded {
	this := BudgetExceeded{}
	return &this
}

// NewBudgetExceededWithDefaults instantiates a new BudgetExceeded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBudgetExceededWithDefaults() *BudgetExceeded {
	this := BudgetExceeded{}
	return &this
}

// GetBudgetExceeded returns the BudgetExceeded field value if set, zero value otherwise.
func (o *BudgetExceeded) GetBudgetExceeded() bool {
	if o == nil || o.BudgetExceeded == nil {
		var ret bool
		return ret
	}
	return *o.BudgetExceeded
}

// GetBudgetExceededOk returns a tuple with the BudgetExceeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetExceeded) GetBudgetExceededOk() (*bool, bool) {
	if o == nil || o.BudgetExceeded == nil {
		return nil, false
	}
	return o.BudgetExceeded, true
}

// HasBudgetExceeded returns a boolean if a field has been set.
func (o *BudgetExceeded) HasBudgetExceeded() bool {
	if o != nil && o.BudgetExceeded != nil {
		return true
	}

	return false
}

// SetBudgetExceeded gets a reference to the given bool and assigns it to the BudgetExceeded field.
func (o *BudgetExceeded) SetBudgetExceeded(v bool) {
	o.BudgetExceeded = &v
}

func (o BudgetExceeded) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BudgetExceeded != nil {
		toSerialize["budget_exceeded"] = o.BudgetExceeded
	}
	return json.Marshal(toSerialize)
}

type NullableBudgetExceeded struct {
	value *BudgetExceeded
	isSet bool
}

func (v NullableBudgetExceeded) Get() *BudgetExceeded {
	return v.value
}

func (v *NullableBudgetExceeded) Set(val *BudgetExceeded) {
	v.value = val
	v.isSet = true
}

func (v NullableBudgetExceeded) IsSet() bool {
	return v.isSet
}

func (v *NullableBudgetExceeded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBudgetExceeded(val *BudgetExceeded) *NullableBudgetExceeded {
	return &NullableBudgetExceeded{value: val, isSet: true}
}

func (v NullableBudgetExceeded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBudgetExceeded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
